# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.
#
# Portions of this code have been copied from: https://github.com/r-franke/spicy_stun/blob/master/stun.spicy
# Permission: https://github.com/r-franke/spicy_stun/issues/1

module STUN;

import spicy;

type AddrFamily = enum { IPv4 = 0x01, IPv6 = 0x02 };

# https://www.iana.org/assignments/stun-parameters/stun-parameters.xhtml
type Method = enum {
	BINDING = 0x01,
	ALLOCATE = 0x03,
	REFRESH = 0x04,
	SEND = 0x06,
	DATA = 0x07,
	CREATEPERMISSION = 0x08,
	CHANNELBIND = 0x09,
	CONNECT = 0x0A,
	CONNECTIONBIND = 0x0B,
	CONNECTIONATTEMPT = 0x0C,
	GOOGPING = 0x080,
	};

type Class = enum {
	REQUEST = 0,
	INDICATION = 1,
	RESPONSE_SUCCESS = 2,
	RESPONSE_ERROR = 3
	};

# https://www.iana.org/assignments/stun-parameters/stun-parameters.xhtml
type AttrType = enum {
	MAPPED_ADDRESS = 0x0001,
	USERNAME = 0x0006,
	MESSAGE_INTEGRITY = 0x0008,
	ERROR_CODE = 0x0009,
	UNKNOWN_ATTRIBUTES = 0x000A,
	CHANNEL_NUMBER = 0x000C,
	LIFETIME = 0x000D,
	XOR_PEER_ADDRESS = 0x0012,
	DATA = 0x0013,
	REALM = 0x0014,
	NONCE = 0x0015,
	XOR_RELAYED_ADDRESS = 0x0016,
	REQUESTED_ADDRESS_FAMILY = 0x0017,
	EVEN_PORT = 0x0018,
	REQUESTED_TRANSPORT = 0x0019,
	DONT_FRAGMENT = 0x001A,
	ACCESS_TOKEN = 0x001B,
	MESSAGE_INTEGRITY_SHA256 = 0x001C,
	PASSWORD_ALGORITHM = 0x001D,
	USERHASH = 0x001E,
	XOR_MAPPED_ADDRESS = 0x0020,
	RESERVATION_TOKEN = 0x0022,
	PRIORITY = 0x0024,
	USE_CANDIDATE = 0x0025,
	PADDING = 0x0026,
	RESPONSE_PORT = 0x0027,
	CONNECTION_ID = 0x002A,
	ADDITIONAL_ADDRESS_FAMILY = 0x8000,
	ADDRESS_ERROR_CODE = 0x8001,
	PASSWORD_ALGORITHMS = 0x8002,
	ALTERNATE_DOMAIN = 0x8003,
	ICMP = 0x8004,
	SOFTWARE = 0x8022,
	ALTERNATE_SERVER = 0x8023,
	TRANSACTION_TRANSMIT_COUNTER = 0x8025,
	CACHE_TIMEOUT = 0x8027,
	FINGERPRINT = 0x8028,
	ICE_CONTROLLED = 0x8029,
	ICE_CONTROLLING = 0x802A,
	RESPONSE_ORIGIN = 0x802B,
	OTHER_ADDRESS = 0x802C,
	ECN_CHECK = 0x802D,
	THIRD_PARTY_AUTHORIZATION = 0x802E,
	MOBILITY_TICKET = 0x8030,
	CISCO_STUN_FLOWDATA = 0xC000,
	ENF_FLOW_DESCRIPTION = 0xC001,
	ENF_NETWORK_STATUS = 0xC002,
	GOOG_NETWORK_INFO = 0xC057,
	GOOG_LAST_ICE_CHECK_RECEIVED = 0xC058,
	GOOG_MISC_INFO = 0xC059,
	GOOG_OBSOLETE_1 = 0xC05A,
	GOOG_CONNECTION_ID = 0xC05B,
	GOOG_DELTA = 0xC05C,
	GOOG_DELTA_ACK = 0xC05D,
	GOOG_MESSAGE_INTEGRITY_32 = 0xC060,
	};

#  RFC5389:
#
# Magic cookie: 0x2112A442
#
#  0                   1                   2                   3
#  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |0 0|     STUN Message Type     |         Message Length        |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                         Magic Cookie                          |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                                                               |
# |                     Transaction ID (96 bits)                  |
# |                                                               |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
# |                        [Attributes,                           |
# |                            ...]                               |
# +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#
#  msg_type:
#                  0                 1
#                  2  3  4 5 6 7 8 9 0 1 2 3 4 5
#                 +--+--+-+-+-+-+-+-+-+-+-+-+-+-+
#                 |M |M |M|M|M|C|M|M|M|C|M|M|M|M|
#                 |11|10|9|8|7|1|6|5|4|0|3|2|1|0|
#                 +--+--+-+-+-+-+-+-+-+-+-+-+-+-+

const MAGIC_COOKIE = /\x21\x12\xA4\x42/;

public type STUNPackets = unit {
    records: STUNPacket()[];
};

public type STUNPacket = unit {
	var M: uint16;
	var C: uint16;

	msgtype: bitfield(16) {
	  m0: 0..3;
	  c0: 4;
	  m1: 5..7;
	  c1: 8;
	  m2: 9..13;
	  zeros: 14..15 &requires=($$ == 0);
	} {
		self.M = self.msgtype.m0 + 16*self.msgtype.m1 + 128*self.msgtype.m2;
		self.C = self.msgtype.c0 + 2*self.msgtype.c1;
	}

	msg_length: uint16;
	: MAGIC_COOKIE;
	trans_id: bytes &size=12;
	attributes: Attribute(self.M, self.C, self.trans_id)[];
};

#       0                   1                   2                   3
#       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
#      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#      |         Type                  |            Length             |
#      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#      |                         Value (variable)...                   |
#      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#      https://tools.ietf.org/html/rfc5389#section-15

type Attribute = unit(method: uint16, class: uint16, trans_id: bytes) {
	var trans_id: bytes = trans_id;
	var method: uint16 = method;
	var class: uint16 = class;
	var value_padding: uint16;
	var total_size: uint16;
	attr_type: uint16 &convert=AttrType($$);
	attr_length: uint16 {
		self.value_padding = padding($$);
		self.total_size = $$ + self.value_padding;
	}
	switch (self.attr_type) {
		AttrType::MAPPED_ADDRESS -> MAPPED_ADDRESS: MappedAddress(self.attr_length);
		AttrType::USERNAME -> USERNAME: bytes &size=self.attr_length;
		AttrType::MESSAGE_INTEGRITY -> HMAC_SHA1: bytes &size=20;
		AttrType::ERROR_CODE -> ERROR_CODE: ErrorCode(self.attr_length);
		AttrType::UNKNOWN_ATTRIBUTES -> UNKNOWN_ATTRIBUTES: UnknownAttributes(self.attr_length);
		AttrType::REALM -> REALM: bytes &size=self.attr_length;
		AttrType::NONCE -> NONCE: bytes &size=self.attr_length;
		AttrType::XOR_MAPPED_ADDRESS -> XOR_MAPPED_ADDRESS: MappedAddress(self.attr_length);
		AttrType::XOR_PEER_ADDRESS -> XOR_PEER_ADDRESS: MappedAddress(self.attr_length);
		AttrType::XOR_RELAYED_ADDRESS -> XOR_RELAYED_ADDRESS: MappedAddress(self.attr_length);
		AttrType::OTHER_ADDRESS -> OTHER_ADDRESS: MappedAddress(self.attr_length);
		AttrType::PRIORITY -> PRIORITY: bytes &size=4;
		AttrType::USE_CANDIDATE -> USE_CANDIDATE: bytes &size=0;
		AttrType::SOFTWARE -> DESCRIPTION: bytes &size=self.attr_length;
		AttrType::ALTERNATE_SERVER -> ALTERNATE_SERVER: MappedAddress(self.attr_length);
		AttrType::FINGERPRINT -> CRC_32: bytes &size=self.attr_length;
		AttrType::ICE_CONTROLLED -> ICE_CONTROLLED: bytes &size=self.attr_length;
		AttrType::ICE_CONTROLLING -> ICE_CONTROLLING: bytes &size=self.attr_length;
		# TODO: One could add more handlers here.
		* -> attr_value: bytes &size=self.total_size;
	};
	padding: bytes &size=self.value_padding;
};

# https://tools.ietf.org/html/rfc5389#section-15.1
type MappedAddress = unit(length: uint16) {
	nulls: uint8;
	family: uint8 &convert=AddrFamily($$);
	x_port: uint16;
	ipv4: addr &ipv4 if (self.family == AddrFamily::IPv4);
	ipv6: addr &ipv6 if (self.family == AddrFamily::IPv6);
};

# https://tools.ietf.org/html/rfc5389#section-15.6
type ErrorCode = unit(length: uint16) {
	: bytes &size=2;
	class: uint8;
	number: uint8;
	reason: bytes &size=(length - 4);
};

# https://tools.ietf.org/html/rfc5389#section-15.9
type UnknownAttributes = unit(length: uint16) {
	unknowns: uint16[length / 2];
};

function padding(x: uint16): uint16 {
	if (x % 4 > 0) {
		return 4 - (x % 4);
	} else {
		return 0;
	}
}
